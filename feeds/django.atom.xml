<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>cadu-leite</title><link href="/" rel="alternate"></link><link href="/feeds/django.atom.xml" rel="self"></link><id>/</id><updated>2015-08-11T00:00:00-03:00</updated><entry><title>Django - Se você não gosta, é porque está usando errado.</title><link href="/django_nao_gosta_porque_esta_usando_errado.html" rel="alternate"></link><updated>2015-08-11T00:00:00-03:00</updated><author><name>Carlos Leite</name></author><id>tag:,2015-07-07:django_nao_gosta_porque_esta_usando_errado.html</id><summary type="html">&lt;p&gt;Se já usou o framework Django e não gostou, você provavelmente o usou no problema errado !&lt;/p&gt;
&lt;p&gt;No texto abaixo eu vou descrever algumas caracteísticas do framework Django, que EU julgo, sejam importantes levar em consideração antes de decidir usá-lo para sua solucão.&lt;/p&gt;
&lt;h2&gt;1. O que é Django ?&lt;/h2&gt;
&lt;p&gt;Django é um framework web para desenvolvimento de &lt;strong&gt;aplicações WEB&lt;/strong&gt; e foi escrito em &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;slogan&lt;/em&gt; do django nos dá uma pista.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django: The web framework for perfectionists with deadlines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Então o objectivo do framework Django é &lt;strong&gt;OTIMIZAR o tempo&lt;/strong&gt; de desenvolvimento de uma aplicação WEB - prototipagem rápida! Aliás, a jato ! 8P&lt;/p&gt;
&lt;p&gt;Isso não quer dizer que todo o resto foi negligenciado, só que o objetivo principal era otimizar o tempo de &lt;em&gt;bootstrap&lt;/em&gt; - Início do projeto.&lt;/p&gt;
&lt;p&gt;Para isso, os desenvolvedores do Django integraram ao framework, algumas ferramentas (ou bibliotecas python) que sempre eram usadas por estes ao iniciar uma aplicação WEB.&lt;/p&gt;
&lt;p&gt;Embutidos no framework, estão bibliotecas que tratam requisições WEB, um &lt;em&gt;ORM&lt;/em&gt; para BD relacionais, uma linguagem de &lt;em&gt;templates&lt;/em&gt; entre outras ferramentas uo funcionalidades. Ex. framework de autenticação de usuários, sistema de permissões, cache, variáveis de ambiente e etc.
Tudo o que você precisa para uma &lt;strong&gt;Aplicação WEB&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Bala de prata !?!&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NÃO&lt;/strong&gt;. O Django não é um framework para ser usado em qualquer aplicação WEB.&lt;/p&gt;
&lt;p&gt;Aliás, o que é uma aplicação WEB ? aqui começa o problema para definir se sua solução requer ou exige a utilização do Django.&lt;/p&gt;
&lt;p&gt;Aplicação WEB, pode ser qualquer coisa, um Blog pode ser publicado ou pode ter seu sistema de publicação sendo uma aplicação web, e o sistema de cadastramento do sistema de saúde do brasil com milhões de usuários também. Mas nem por isso tem soluções pareceidas.&lt;/p&gt;
&lt;p&gt;Eu costumo fazer a seguinte pergunta:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Maior parte dos dados é tabular e são inseridos pelo usuário ?
... então é um projeto Django.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se existe uma quantidade de dados grande que serão inseridos pelo usuário, 
eu preciso de formulários, validção e um local pra armazenar.&lt;/p&gt;
&lt;p&gt;São as 3 funções, principais, que o django resolve !
1. entrada de dados (views/templates)
2. validação da entrada de dados (Forms)
3. armazenamento (ORM)&lt;/p&gt;
&lt;p&gt;Não tão fácil - as vezes, responder essa pergunta não é o suficiente.&lt;/p&gt;
&lt;p&gt;e mais, &lt;strong&gt;a recíproca não é verdadeira&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Mesmo que sua aplicação tenha muita interação com o usuário, banco de dados, perfis, permissões  etc, mesmo assim o Django &lt;strong&gt;pode&lt;/strong&gt; não ser a melhor soluçao.&lt;/p&gt;
&lt;p&gt;Mas a pergunta faz sentido, dentro do meu contexto de desenvolvimento.&lt;/p&gt;
&lt;p&gt;Porque a pergunta então ?&lt;/p&gt;
&lt;h2&gt;Caraceterística importantes do Django.&lt;/h2&gt;
&lt;p&gt;Um dos pontos de ganho de produtividade que se pode ter em um time que está construindo um sistema, é diminuir a quantidade de decisões a serem tomadas durante o desenvolvimento.&lt;/p&gt;
&lt;p&gt;Algumas são muito importantes mas ao mesmo tempo mais básicas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ex.: existe um framework que podemos usar para este projeto ? qual ?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Outras questões, podem ter respostas menos óbvias, e ao mesmo tempo terem tantas opções similares que é quase uma questão pessoal ou cultural.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Ex.: que banco de dados utilizar na solução.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na verdade qualquer um dos meus 2 exemplos, tem uma infinidade de fatores que podem influenciar. A Cultura, &lt;em&gt;know-how&lt;/em&gt; da equipe de desenvolvimento,  ou o conhecimento desta, cultura da empresa, o cliente etc etc etc. Mas o fato é :&lt;/p&gt;
&lt;p&gt;Quanto menos decisões tivermos que tomar para cada novo projeto de software que fazemos, aumentamos a produtividade. (... só essa inha da um novo artigo.)&lt;/p&gt;
&lt;p&gt;O que o Django faz para aumentar a produtividade é tomar algumas decisões de projeto de aplicação WEB.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;O sistema ORM&lt;/li&gt;
&lt;li&gt;A linguagem de templates.&lt;/li&gt;
&lt;li&gt;FORMs&lt;/li&gt;
&lt;li&gt;parte de como vc deve organizar o projeto.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Onde utilizar o Django ?&lt;/h2&gt;
&lt;p&gt;Mas aqui também se aplica a regra: &lt;em&gt;"não existe almoço grátis"&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sempre que há um bônus, existe também um ônus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No caso do framework Django, o ônus é a "quase obrigatoriedade" de se resolver certos problemas da aplicação web com as ferramentas (bibliotecas)
 &lt;em&gt;embutidas&lt;/em&gt; no framework. &lt;strong&gt;QUASE&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Para que o desenvolvimento de uma aplicação Django seja rápido (rápida prototipação), os desenvolvedores do framework Django, fizeram algumas escolhas para embutir no framework soluções que resolvem problemas comuns ao desenvolvimento de aplicações WEB (comuns ao contexto que eles imaginaram ao desenvolver o framework) . Essa integração,&lt;/p&gt;
&lt;p&gt;O outro lado desta moeda ou no caso, o &lt;em&gt;"custo desse almoço"&lt;/em&gt; é que para ganhar tempo, sua solucão terá que ser desenvolvida, e terá talvez que se adaptar em parte a essas ferramentas que compõem o framework Django.&lt;/p&gt;
&lt;p&gt;Tentar alterar o comportamento de uma dessas ferramentas ou até &lt;em&gt;"trocá-las"&lt;/em&gt; pode lhe tirar todo o ganho que o framework Django lhe daria, e consequentemente, perde-se o sentido de utilizar o framework.&lt;/p&gt;
&lt;p&gt;E aí ?! e o slogan ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The web framework for perfectionists with deadlines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;depende de qual é o seu problema, ou melhor ainda, qual a solução você quer dar ao seu problema.&lt;/p&gt;
&lt;h3&gt;Como saber se uso ou não o framework Django&lt;/h3&gt;
&lt;p&gt;Alguns desenvolvedores, insistem em comparar &lt;strong&gt;microframeworks&lt;/strong&gt; com Django, e muitas vezes o fazem de maneira errada.&lt;/p&gt;
&lt;p&gt;Vc pode querer comparar qualquer coisa com um framework web, até uma laranja, e vai chegar a conclusão que são coisas bem diferentes (ou não). Um microframework, está bem mais próximo de um framework, mas ainda sim como a laranja, atende necessidades diferentes de um framework.&lt;/p&gt;
&lt;p&gt;POR EXEMPLO &lt;strong&gt;Flask&lt;/strong&gt; !
&lt;strong&gt;Flask&lt;/strong&gt; é um micro framework também desenvolvido em Python, para desenvolvimento de aplicações WEB. sem os plugins, ele é uma grande biblioteca para tratar requisições HTTP.
Vc também não precisa dele para fazer um blog, mas se vc quiser fazer um sistema de publicação enxuto, ele pode ser uma saida (mas antes tente algo como o projeto Pelikan por exemplo.)&lt;/p&gt;
&lt;p&gt;Um exemplo de uso do FLASK, caso no qual o Django seria &lt;em&gt;"overkill"&lt;/em&gt; é se vc necessita somente desenvolver um serviço WEB, recebimento de dados (machine to machine), ou um validador de 1 formulário, ou coisas suscintas e objetivas com pouca ou nenhuma interação de usuários.&lt;/p&gt;
&lt;h2&gt;Para que serve o Django então ?:&lt;/h2&gt;
&lt;p&gt;O framework Django é formado por 3 principais &lt;em&gt;"partes"&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ORM&lt;/li&gt;
&lt;li&gt;Linguagem de templates.&lt;/li&gt;
&lt;li&gt;Tratamento de requisições HTTP (com extrema simplcidade).&lt;/li&gt;
&lt;li&gt;ADMIN - um site pronto para que possa editar os modelos de dados do projeto.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;...
para quem nao conhece nada de Django, ele ainda tem um sistema para autenticação de usuários, um framework para permisões entre vários outros plugins e bibliotecas que podem facilitar o desenvolvimento de uma applicação WEB. Existe até uma app para fazer com que o framework trabalhe com REST!&lt;/p&gt;
&lt;p&gt;Isso quer dizer que, utilizando o framework, vc tem facilidades para acessar um banco de dados (ler, escrever), permite publicar dados dinâmicos em uma página web, possui rotinas para que tudo isso seja &lt;strong&gt;acionado&lt;/strong&gt; através de chamadas HTTP - requisições http.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LOGO se vc não precisa de uma destas 3 "ferramentas", então vc não precisa do Django.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se vc não precisa de um formulário web + controle de usuário + páginas html (talvez vc ainda queira o banco de dados), o Flask é realmente uma ótima opção..&lt;/p&gt;
&lt;p&gt;O que os desenvolvedores (comunidade)  do Django, fizeram, foi tomar algumas decisões por você (programador) para que você foque no problema que vc quer resolver com a sua aplicação. Essas escolhas (ORM, templates ...) tornam o início do projeto extremamente rápido&lt;/p&gt;
&lt;p&gt;Eles definiram o ORM, a linguagem de templates e a maneira como vc interage com o usuário (ModelForms)  e colocaram dentro de um pacote que se integra. ...  e muito bem diga-se de passagem.&lt;/p&gt;
&lt;p&gt;Se vc quer alterar um destas "ferramentas", faça um favor a você mesmo, e não use o Django !&lt;/p&gt;
&lt;p&gt;Python tem talvez uma centena de bibliotecas e frameworks capazes de resolver requisições HTTP,  vc vai enontrar algo que se encaixe perfeitamente na suas necessidades ...  ou algo muito próximo.&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry></feed>